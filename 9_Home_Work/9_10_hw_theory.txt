0) Итератор - это такой интерфейс, который позволяет перемещаться (итерироваться) по элементам некоторой последовательности, указывает на них и похзволяет перемещаться вперёд или назад. Пусть у нас есть контейнер с некоторыми элементами. Мы хотим сослаться не на весь контейнер, а на какую-то его часть. От этого места нашего контейнера мы можем перейти вперёд или назад по контейнеру и изменить что-то. По свойствам он похож на указатели. Есть разные типы итераторов:
Входной (input) - итератор, предназначенный только для чтения, но не изменения. Он является ожнонаправленным, то есть с помощью префиксной или постфиксной формы оператора ++ передвигается по структуре только в одну сторону, причём последовательность считываемых элементов не гарантирует строгий порядок. 
Выходной (output) - итератор на перезапись, то есть возможно не только чтение, но и правка, так же является однонаправленным и определена операция ++.
Однонаправленный. Почти то же самое, что input и output вместе, только оно как раз гарантирует, что последовательность чтения одинакова, то есть пройдя по последовательности дважды, чтение элементов будет выполоняться по одному и тому же порядку.
Двунаправленный. Существует помимо постфиксной и префиксной операции ++ такая операция как --, которая позволяет двигаться в обе стороны, а не только вперёд. с произвольным доступом 	Читают и пишут значения с произвольным доступом. Самые мощные итераторы, сочетающие функциональность двунаправленных итераторов и возможность выполнения арифметики указателей и сравнений указателей.
С произвольным доступом. Читают и пишут значения с произвольным доступом. Самые мощные итераторы, сочетающие функциональность двунаправленных итераторов и все необходимые арифметические действия и сравнения, как для указателей.

1) Стандартная библиотека шаблонов (STL) - это набор согласованных обобщённых алгоритмов, контейнеров, средств доступа к их содержимому и различных вспомогательных функций в C++. В библиотеке выделяют пять основных компонентов:
Контейнер — хранение набора объектов в памяти.
Итератор — обеспечение средств доступа к содержимому контейнера.
Алгоритм — определение вычислительной процедуры.
Адаптер — адаптация компонентов для обеспечения различного интерфейса.
Функциональный объект — сокрытие функции в объекте для использования другими компонентами.

2) В STL содержатся следующие классы (некоторые из них)
    array - хранит элементы в виде статического массива
    stack - элементы в виде стека, где последний элемент, который вошёл, вышел первым
    list - коллекция, хранящая элементы в виде двунаправленнного списка
    queue - очередь, такой список по сути, у которого вход в конце, выход в начале, если элемент первый вошёл, он же первый и вышел.
    dequeue - двусторонняя очередь, это такой очень обобщенный стек и очередь одновременно, у которого можно входить и выходить в обе стороны, э
    то лист во все стороны
    vector - динамический массив с автоматическим изменением длины массива при добавлении или удалении объекта
    map - упорядоченный массив пар элементов, который состоит из ключа и самого элемента, отождествялемого с этим ключом, уникальность ключей
    set - упорядоченное множество объектов, множество это не набор, а значит это гарантирует уникальность элементов
    multimap - map, в котором можно хранить одинаковые ключи
    multiset - набор элементов, то бишь не сохранена уникальность обектов
    priority_queue - очередь с приоритетом
    

3) Библиотека <algorithm> - это библиотека внутри стандартной библиотеки, которая сожержит набор функций для выполнения алгоритмических операций над контейнерами. Есть несколько типов алгоритмов:
	Не изменяющие последовательные операции
    	find(first, last, value) - Возвращает итератор, указывающий на первый элемент, равный значению value
    	for_each(first, last, function) - Применяет function для всех объектов
    	search(first1, last1, first2, last2) - Проверяет, содержится ли второй диапазон внутри первого и возвращает начало совпадения или last1, если нет совпадения 

	Изменяющие последовательные операции
    	reverse(first, last) - Обращает последовательность объектов из диапазона 
    	replace(first, last, old, new) - Заменяет все объекты, равные old , объектами, равными new
    	transform(first1, last1, first2, operator) - Превращает объекты из диапазона 1 в новые объекты диапазона 2, применяя operator

	Операции сортировки
    	sort(first, last) - Сортирует объекты в диапазоне 
    	stable_sort(first, last) - Отличается от обычной сортировки только тем, что если значения одинаковые попадаются, то их позиции не меняются, онги останутся в том же порядке относитльно друг друга
    
	Операции поиска
    	binary_search(first, last, value) - Возвращает true, если значение value входит в интервал 

	Операции отношений
		max_element(first, last) - Возвращает итератор, указывающий на наибольший объект в диапазоне 
		min_element(first,last) - Возвращает итератор, указывающий на наименьший объект в диапазоне 